{"meta":{"title":"Luyus的个人站点","subtitle":"A website for recording technical learning","description":"星痕的个人博客——Luyus的技术之旅，专注于技术学习与分享。在这里，我将记录自己在编程、网络、运维等领域的探索历程，与你一同成长。Star Trace’s Personal Blog – Luyus’ Tech Journey, dedicated to the exploration and sharing of technology. Here, I document my adventures in programming, networking, and system operations, inviting you to grow alongside me.","author":"Luyus","url":"https://blog.xinghenluyus.cn","root":"/"},"pages":[{"title":"","date":"2025-03-29T05:05:53.178Z","updated":"2025-02-28T02:30:32.880Z","comments":true,"path":"about/index.html","permalink":"https://blog.xinghenluyus.cn/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2025-03-29T05:05:53.179Z","updated":"2025-02-28T02:45:05.669Z","comments":true,"path":"friends/index.html","permalink":"https://blog.xinghenluyus.cn/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2025-03-29T05:05:53.178Z","updated":"2025-02-28T02:54:58.977Z","comments":true,"path":"404.html","permalink":"https://blog.xinghenluyus.cn/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2025-03-29T05:05:53.178Z","updated":"2025-02-28T02:31:52.090Z","comments":true,"path":"categories/index.html","permalink":"https://blog.xinghenluyus.cn/categories/index.html","excerpt":"","text":""},{"title":"","date":"2025-03-29T05:05:53.178Z","updated":"2025-03-09T15:09:55.720Z","comments":true,"path":"custom.js","permalink":"https://blog.xinghenluyus.cn/custom.js","excerpt":"","text":"var binft = function (r) { var isTransparent = true; function getRandomColor() { if(isTransparent){ isTransparent = false; //此处修改字体颜色,最后的 0 和 1 不要改 return \"rgba(255,255,255,0)\" }else{ isTransparent = true; return \"rgba(255,255,255,1)\" } } function n(r) { for (var n = document.createDocumentFragment(), i = 0; r > i; i++) { var oneword = document.createElement(\"span\"); oneword.textContent = \"_\"; // 此处是末尾字符,如果想用光标样式可以改为\"|\" oneword.style.color = getRandomColor(); n.appendChild(oneword); } return n } function i() { var t = wordList[c.skillI]; c.step ? c.step-- : (c.step = refreshDelayTime, c.prefixP < l.length ? (c.prefixP >= 0 && (c.text += l[c.prefixP]), c.prefixP++) : \"forward\" === c.direction ? c.skillP < t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = \"backward\", c.delay = showTotalWordDelayTime) : c.skillP > 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % wordList.length, c.direction = \"forward\")), r.textContent = c.text, r.appendChild(n(c.prefixP < l.length ? Math.min(maxLength, maxLength + c.prefixP) : Math.min(maxLength, t.length - c.skillP))), setTimeout(i, d) } var l = \"\", //此处改成你自己的诗词 wordList = [ \"最是人间留不住，朱颜辞镜花辞树. ——王国维《蝶恋花》\", \"人生到处知何似，应似飞鸿踏雪泥. ——苏轼《和子由渑池怀旧》\", \"今朝有酒今朝醉，明日愁来明日愁. ——罗隐《自遣》\", \"蜗角虚名，蝇头微利，算来著甚干忙. ——苏轼《满庭芳》\", \"人生自古谁无死？留取丹心照汗青. ——文天祥《过零丁洋》\", \"盛年不重来，一日难再晨. ——陶渊明《杂诗》\", \"人生如逆旅，我亦是行人. ——苏轼《临江仙》\", \"世事短如春梦，人情薄似秋云. ——朱敦儒《西江月》\", \"欲穷千里目，更上一层楼. ——王之涣《登鹳雀楼》\", \"天生我材必有用，千金散尽还复来. ——李白《将进酒》\", \"曾经沧海难为水，除却巫山不是云. ——元稹《离思五首·其四》\", \"举头望明月，低头思故乡. ——李白《静夜思》\", \"十年生死两茫茫，不思量，自难忘. ——苏轼《江城子·乙卯正月二十日夜记梦》\", \"此情可待成追忆，只是当时已惘然. ——李商隐《锦瑟》\", \"还君明珠双泪垂，何不相逢未嫁时. ——张籍《节妇吟》\", \"执手相看泪眼，竟无语凝噎. ——柳永《雨霖铃》\", \"衣带渐宽终不悔，为伊消得人憔悴. ——柳永《蝶恋花》\", \"问君能有几多愁？恰似一江春水向东流. ——李煜《虞美人》\", \"相思相见知何日，此时此夜难为情. ——李白《三五七言》\", \"物是人非事事休，欲语泪先流. ——李清照《武陵春·春晚》\", \"曲径通幽处，禅房花木深. ——常建《题破山寺后禅院》\", \"梨花院落溶溶月，柳絮池塘淡淡风. ——晏殊《寓意》\", \"大漠孤烟直，长河落日圆. ——王维《使至塞上》\", \"春色满园关不住，一枝红杏出墙来. ——叶绍翁《游园不值》\", \"小荷才露尖尖角，早有蜻蜓立上头. ——杨万里《小池》\", \"明月松间照，清泉石上流. ——王维《山居秋暝》\", \"天苍苍，野茫茫，风吹草低见牛羊. ——《敕勒歌》（南北朝民歌）\", \"落霞与孤鹜齐飞，秋水共长天一色. ——王勃《滕王阁序》\", \"接天莲叶无穷碧，映日荷花别样红. ——杨万里《晓出净慈寺送林子方》\", \"山光悦鸟性，潭影空人心. ——常建《题破山寺后禅院》\", \"少壮不努力，老大徒伤悲. ——《长歌行》（汉乐府）\", \"千淘万漉虽辛苦，吹尽狂沙始到金. ——刘禹锡《浪淘沙》\", \"老骥伏枥，志在千里. ——曹操《龟虽寿》\", \"黑发不知勤学早，白首方悔读书迟. ——颜真卿《劝学》\", \"咬定青山不放松，立根原在破岩中. ——郑燮《竹石》\", \"莫等闲，白了少年头，空悲切. ——岳飞《满江红》\", \"长风破浪会有时，直挂云帆济沧海. ——李白《行路难》\", \"不经一番寒彻骨，怎得梅花扑鼻香. ——黄檗禅师《上堂开示颂》\", \"千磨万击还坚劲，任尔东西南北风. ——郑燮《竹石》\", \"少年易老学难成，一寸光阴不可轻. ——朱熹《偶成》\", \"明日隔山岳，世事两茫茫. ——杜甫《赠卫八处士》\", \"劝君更尽一杯酒，西出阳关无故人. ——王维《送元二使安西》\", \"孤帆远影碧空尽，唯见长江天际流. ——李白《黄鹤楼送孟浩然之广陵》\", \"相见时难别亦难，东风无力百花残. ——李商隐《无题》\", \"夕阳西下，断肠人在天涯. ——马致远《天净沙·秋思》\", \"独在异乡为异客，每逢佳节倍思亲. ——王维《九月九日忆山东兄弟》\", \"故国三千里，深宫二十年. ——张祜《宫词》\", \"念天地之悠悠，独怆然而涕下. ——陈子昂《登幽州台歌》\", \"何处合成愁？离人心上秋. ——吴文英《唐多令·惜别》\", \"欲寄彩笺兼尺素，山长水阔知何处. ——晏殊《蝶恋花》\", \"人生若只如初见，何事秋风悲画扇. ——纳兰性德《木兰花令·拟古决绝词》\", \"醉后不知天在水，满船清梦压星河. ——唐珙《题龙阳县青草湖》\", \"我见青山多妩媚，料青山见我应如是. ——辛弃疾《贺新郎·甚矣吾衰矣》\", \"一蓑烟雨任平生. ——苏轼《定风波》\", \"拣尽寒枝不肯栖，寂寞沙洲冷. ——苏轼《卜算子·黄州定慧院寓居作》\" ].map(function (r) { return r + \"\" }), showTotalWordDelayTime = 2, refreshDelayTime = 1, maxLength = 1, d = 75, c = { text: \"\", prefixP: -maxLength, skillI: 0, skillP: 0, direction: \"forward\", delay: showTotalWordDelayTime, step: refreshDelayTime }; i() }; binft(document.getElementById('binft')); // 添加打开背景图片的函数 function openCurrentBgImage() { const bgElement = document.querySelector('.parallax-mirror img'); if (bgElement && bgElement.src) { window.open(bgElement.src, '_blank'); } else { console.log('未找到背景图片'); } }"},{"title":"所有标签","date":"2025-03-29T05:05:53.179Z","updated":"2025-02-28T02:33:09.748Z","comments":true,"path":"tags/index.html","permalink":"https://blog.xinghenluyus.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何本地服务化部署PaddleOCR","slug":"2025-8-20","date":"2025-08-19T16:00:00.000Z","updated":"2025-08-20T05:34:37.842Z","comments":true,"path":"2025/08/20/2025-8-20/","permalink":"https://blog.xinghenluyus.cn/2025/08/20/2025-8-20/","excerpt":"","text":"耗时一礼拜阅读完文档摸索出一条PaddleOCR最简单快速部署，并能通过api调用的方法。总结如下： 1 环境准备 Lunix系统 有显卡（我的是RTX4080），并且安装对应驱动 提前安装了Docker 2 通过镜像拉取环境 安装含有高性能推理依赖的 PaddleX 官方 Docker 镜像 这里推荐CUDA11.8的版本，全部依赖都是齐全的，而且不会有冲突。安装方法如下：命令参考网站 bash123456789101112# 1.拉取官方GPU镜像(以网站最新版本为准)docker pull ccr-2vdh3abv-pub.cnc.bj.baidubce.com/paddlex/paddlex:paddlex3.0.1-paddlepaddle3.0.0-gpu-cuda11.8-cudnn8.9-trt8.6# 2.创建容器运行目录mkdir puddlexcd puddlex# 3.运行容器docker run --gpus all --name paddle-hpi -v $PWD:/paddle --shm-size=16G --network=host -it ccr-2vdh3abv-pub.cnc.bj.baidubce.com/paddlex/paddlex:paddlex3.0.1-paddlepaddle3.0.0-gpu-cuda11.8-cudnn8.9-trt8.6 /bin/bash# 默认直接进入容器内部了，后续退出想再次进入使用docker attach paddle-hpi 进入容器内部安装 PaddleOCR bash12345# 1.安装PaddlePaddlepython -m pip install paddlepaddle-gpu==3.0.0 -i https://www.paddlepaddle.org.cn/packages/stable/cu118/# 2.安装paddleocrpip install paddleocr 验证安装 采用github上的命令，简单直接： bash1234567891011# 运行 PP-OCRv5 推理paddleocr ocr -i https://paddle-model-ecology.bj.bcebos.com/paddlex/imgs/demo_image/general_ocr_002.png --use_doc_orientation_classify False --use_doc_unwarping False --use_textline_orientation False # 运行 PP-StructureV3 推理paddleocr pp_structurev3 -i https://paddle-model-ecology.bj.bcebos.com/paddlex/imgs/demo_image/pp_structure_v3_demo.png --use_doc_orientation_classify False --use_doc_unwarping False# 运行 PP-ChatOCRv4 推理前，需要先获得千帆API Keypaddleocr pp_chatocrv4_doc -i https://paddle-model-ecology.bj.bcebos.com/paddlex/imgs/demo_image/vehicle_certificate-1.png -k 驾驶室准乘人数 --qianfan_api_key your_api_key --use_doc_orientation_classify False --use_doc_unwarping False # 查看 &quot;paddleocr ocr&quot; 详细参数paddleocr ocr --help 3 开启服务3.1 简单服务化部署 安装服务化部署插件 bash1paddlex --install serving 运行服务器 bash12345# OCR产线paddlex --serve --pipeline OCR --port 8080# PP-StructureV3paddlex --serve --pipeline PP-StructureV3 --port 8080 3.2 启用高性能推理 安装高性能推理插件 bash1paddlex --install hpi-gpu 运行服务器 bash12345# OCR产线paddlex --serve --pipeline OCR --port 8080 --hpi_config# PP-StructureV3paddlex --serve --pipeline PP-StructureV3 --port 8080 --hpi_config 3.3 同时启动多个服务 安装screen bash12apt-get updateapt-get install -y screen 通过screen会话运行服务器 bash12345# OCR产线screen -S ocr -d paddlex --serve --pipeline OCR --port 8080 --hpi_config# PP-StructureV3screen -S structure -d paddlex --serve --pipeline PP-StructureV3 --port 8080 --hpi_config 管理screen会话 bash12345# 查看正在运行的会话screen -ls# 进入某个容器(使用Ctrl+D，然后按A退出)screen -r ocr/structure 4 API文档详见对应文档 -&gt; 开发集成&#x2F;部署 -&gt; API参考 ocr对应api POST &#x2F;ocr structure对应api POST &#x2F;layout-parsing 欢迎评论！","categories":[{"name":"模型部署","slug":"模型部署","permalink":"https://blog.xinghenluyus.cn/categories/%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://blog.xinghenluyus.cn/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"如何在Volantis-5主题上使用artalk评论系统(同本站)","slug":"2025-8-18","date":"2025-08-17T16:00:00.000Z","updated":"2025-08-18T06:09:52.057Z","comments":true,"path":"2025/08/18/2025-8-18/","permalink":"https://blog.xinghenluyus.cn/2025/08/18/2025-8-18/","excerpt":"","text":"artalk以私有化部署实现数据自控与极速响应，社交登录、邮件通知、Markdown 等功能开箱即用。话不多说，下面直接上教程。 这里我犯了很多错一直走回头路，一个配置反复折腾，以下是最简步骤。 1 在服务端配置 Nginx1.1 准备工作 拥有一台服务器，并且拥有公网ip 我这里是采用了腾讯云的轻量应用云服务器，使用的Ubuntu并安装好了docker。这里采用docker部署。 1.2 解析域名到服务器这一步主要是为了开启HTTPS，如果是动态ip，还可以配合DDNS动态解析域名。 推荐使用artalk.example.com这样的子域名格式，域名可以和博客网站保持一致，简化备案流程。 域名解析 在本地电脑打开终端，运行： bash1ping artalk.example.com 如果返回的ip是解析的ip，说明解析成功。 1.3 安装 Nginx登录你的服务器，执行： Bash123456789# 更新包列表sudo apt update# 安装 Nginxsudo apt install nginx -y# 启动并设置开机自启sudo systemctl start nginxsudo systemctl enable nginx 测试 Nginx 是否正常： 浏览器访问：artalk.example.com，看到Nginx欢迎页则说明安装成功。 1.4 创建 Nginx 配置文件(不启用 HPPTS) 创建文件 bash1sudo nano /etc/nginx/sites-available/artalk.xinghenluyus.cn.conf nginx1234567891011121314151617181920212223242526server &#123; listen 80; server_name artalk.xinghenluyus.cn; # Certbot 验证路径 location /.well-known/acme-challenge/ &#123; root /var/www/certbot; try_files $uri =404; &#125; # 其他请求先不重定向（或可重定向，但不能 listen 443） location / &#123; # 可选：先不重定向，等证书申请完再开启 proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-Host $host; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; &#125;&#125; 测试配置 bash1sudo nginx -t 应该输出 12nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 重载Nginx bash1sudo systemctl reload nginx 1.5 申请 Let’s Encrypt 证书（Certbot 会自动配置 HTTPS） 安装 Certbot bash1sudo apt install certbot python3-certbot-nginx -y 创建验证目录 bash1sudo mkdir -p /var/www/certbot 创建验证目录 bash1sudo certbot --nginx -d artalk.xinghenluyus.cn 按提示操作： 输入邮箱（用于安全通知） 同意服务条款（输入 Y） 是否接收推广邮件？输入 N 是否将 HTTP 重定向到 HTTPS？选择 2（强制重定向） 2 服务器安装 Artalk2.1 程序部署执行命令在后台启动容器： 请注意ATK_SITE_DEFAULT改成你的网站title(对应_config.yml文件中title)，ATK_SITE_URL改成服务器实际解析域名。 bash123456789docker run -d \\ --name artalk \\ -p 8080:23366 \\ -v $(pwd)/data:/data \\ -e &quot;TZ=Asia/Shanghai&quot; \\ -e &quot;ATK_LOCALE=zh-CN&quot; \\ -e &quot;ATK_SITE_DEFAULT=Artalk 的博客&quot; \\ -e &quot;ATK_SITE_URL=https://artalk.example.com&quot; \\ artalk/artalk-go 执行命令创建管理员账户： bash1docker exec -it artalk artalk admin 2.2 进入后台主机浏览器输入 https://artalk.example.com 进入 Artalk 后台登录界面。 如果这这一步不成功，自行在 1.4, 1.5, 2.1 之间排查原因。 2.3 配置可信域名登录后台 -&gt; 设置 -&gt; 可信域名 将你的博客域名 (也就是要使用这个评论系统页面的所有域名) 都添加到可信域名列表中，解决CORS报错。然后点击右下角应用。 配置示例 3 Volantis 配置 Artalk打开_config.volantis.yml文件，添加artalk相关配置 _config.volantis.yml相关配置 如果你的Volantis版本是5.8.0，则对于新版Artalk也就是2.9.1,浏览器会弹出pjax错误。 这时有两个解决方案： 如果你是通过npm安装的，可以打开node_modules\\hexo-theme-volantis\\layout\\_plugins\\comments\\artalk\\script.ejs，用下面代码替换源码。(记得做好备份工作) script.ejs123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;script&gt; volantis.layoutHelper(&quot;comments&quot;, `&lt;div id=&quot;artalk_container&quot;&gt;&lt;i class=&quot;fa-solid fa-cog fa-spin fa-fw fa-2x&quot;&gt;&lt;/i&gt;&lt;/div&gt;`); function load_artalk() &#123; if (!document.querySelector(&quot;#artalk_container&quot;)) return; volantis.css(&quot;&lt;%- theme.comments.artalk.css %&gt;&quot;); volantis.js(&quot;&lt;%- theme.comments.artalk.js %&gt;&quot;) .then(() =&gt; &#123; if (typeof Artalk === &#x27;undefined&#x27;) &#123; console.error(&#x27;Artalk.js loaded but Artalk is not defined&#x27;); return; &#125; return pjax_artalk(); &#125;) .catch(err =&gt; &#123; console.error(&#x27;Failed to load Artalk.js:&#x27;, err); &#125;); &#125; function pjax_artalk() &#123; if (!document.querySelector(&quot;#artalk_container&quot;)) return; let path = pdata.commentPath; let placeholder = pdata.commentPlaceholder || &quot;&lt;%= theme.comments.artalk.placeholder %&gt;&quot; || &quot;&quot;; if (!path) &#123; path = &#x27;&lt;%= theme.comments.artalk.path %&gt;&#x27; || decodeURI(window.location.pathname); &#125; if (!&#x27;&lt;%= config.permalink %&gt;&#x27;.includes(&#x27;/index.html&#x27;)) &#123; path = path.replace(/\\/index\\.html$/, &#x27;/&#x27;).replace(/\\.html$/, &#x27;&#x27;); &#125; volantis.artalk = Artalk.init(Object.assign(&lt;%- JSON.stringify(theme.comments.artalk) %&gt;, &#123; el: &#x27;#artalk_container&#x27;, pageKey: path, pageTitle: document.title, placeholder: placeholder, useBackendConf: true, site: &#x27;&lt;%= config.title %&gt;&#x27;, darkMode: volantis.dark.mode === &quot;dark&quot;, pvEl: &#x27;#artalk_visitors&#x27;, &lt;% if(!!theme.comments.artalk.imageUploader?.api)&#123; %&gt; imgUploader: function(file) &#123; let headers = new Headers(); headers.set(&#x27;Accept&#x27;, &#x27;application/json&#x27;); &lt;% if(!!theme.comments.artalk.imageUploader?.token) &#123; %&gt; headers.set(&#x27;Authorization&#x27;, &#x27;&lt;%= theme.comments.artalk.imageUploader?.token %&gt;&#x27;); &lt;% &#125; %&gt; let formData = new FormData(); formData.append(&#x27;file&#x27;, file); return fetch(&#x27;&lt;%= theme.comments.artalk.imageUploader?.api %&gt;&#x27;, &#123; method: &#x27;POST&#x27;, body: formData, headers: headers &#125;) .then(resp =&gt; resp.json()) .then(resp =&gt; resp.&lt;%= theme.comments.artalk.imageUploader?.resp %&gt;); &#125;, &lt;% &#125; %&gt; &#125;)); Artalk.use(ctx =&gt; &#123; ctx.on(&#x27;list-loaded&#x27;, () =&gt; &#123; if (typeof VolantisFancyBox === &quot;undefined&quot;) &#123; const checkFancyBox = setInterval(() =&gt; &#123; if (typeof VolantisFancyBox === &quot;undefined&quot;) return; clearInterval(checkFancyBox); VolantisFancyBox.groupBind(&#x27;.atk-content img:not([atk-emoticon])&#x27;, &#x27;Comments&#x27;); &#125;, 100); &#125; else &#123; VolantisFancyBox.groupBind(&#x27;.atk-content img:not([atk-emoticon])&#x27;, &#x27;Comments&#x27;); &#125; &#125;); &#125;); &#125; load_artalk(); volantis.pjax.push(() =&gt; &#123; if (typeof Artalk === &quot;undefined&quot;) &#123; load_artalk(); &#125; else &#123; pjax_artalk(); &#125; &#125;, &#x27;artalk&#x27;); function dark_artalk() &#123; if (!document.querySelector(&quot;#artalk_container&quot;)) return; if (volantis.artalk &amp;&amp; typeof volantis.artalk.setDarkMode === &#x27;function&#x27;) &#123; volantis.artalk.setDarkMode(volantis.dark.mode === &quot;dark&quot;); &#125; &#125; volantis.dark.push(dark_artalk);&lt;/script&gt; 如果你是通过拉取仓库源码方式安装，可以拉取仓库最新的dev分支，我的代码已经被合并到dev分支，暂时还没作为5.8.1版本发布。 dev分支 到这里你的blog已经成功集成Artalk啦！","categories":[{"name":"编程之外","slug":"编程之外","permalink":"https://blog.xinghenluyus.cn/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%96/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://blog.xinghenluyus.cn/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Windows作为Wireguard server多端异地组网解决方案","slug":"2025-8-5","date":"2025-08-04T16:00:00.000Z","updated":"2025-08-18T06:10:01.471Z","comments":true,"path":"2025/08/05/2025-8-5/","permalink":"https://blog.xinghenluyus.cn/2025/08/05/2025-8-5/","excerpt":"","text":"1 前言1.1 背景随着技术的不断革新，个人服务器算力和性能越来越强大，在家部署一台性能不错的主机，然后使用轻薄本远程办公逐渐成为一种解决方案。奈何ip受限，稀少的ipv4地址，复杂的NAT网关，使得公网对局域网的访问难上加难。就算使用Natter加上DDNS临时动态拿到公网ip，难道你想你的电脑远程端口或者ssh端口直接暴露在公网上吗？对此SakuraFRP，向日葵，ToDesk各自给出了不同的解决方案。 这里重点推荐SakuraFrp，通过内网穿透和端口加密给出了不错的解决方案，对公网暴露设备端口并加密，而且不受NAT限制。另外两款远程软件适合临时控制或者备用检修通道，商用型强广告多，不适合长期使用 虽然SakuraFrp功能强大而且价格便宜(临时使用基本免费)，但是所有流量都要到Sakura服务器转发，带宽受限。而且随着设备的变多，错综复杂的穿透隧道让配置和部署变得极其麻烦，点对点的穿透解决方案是不可行的。 这时，完美的解决方案出现了 —&gt; Wireguard 1.2 Wireguard介绍WireGuard 是一种现代化的、简化的、安全的VPN（虚拟私人网络）协议。以下是对其特点及工作原理的详细介绍： 简洁性：WireGuard 的设计目标之一是简化配置和部署，其代码库远小于其他如 OpenVPN 和 IPSec 等解决方案。 性能：由于其精简的设计和对最新加密技术的应用，WireGuard 速度更快、延迟更低。 WireGuard 使用最先进的加密算法，确保数据传输的安全性。 WireGuard 可以在多种平台上运行，包括 Linux、Windows、macOS、iOS、Android 等，支持跨平台使用，同时其简单的配置流程也降低了用户的使用门槛。 通过 UDP 协议进行通信，WireGuard 能够更好地适应网络条件的变化，并且具有自动重连功能，保证连接的稳定性和可靠性。 与传统VPN不同的是，WireGuard 支持客户端使用动态IP地址，无需固定IP地址即可建立稳定的连接，且兼容ipv4和ipv6。 使用WireGuard，我们可以将所有想要直接关联的设备通过安全隧道连接起来，形成一个虚拟的专用网络，可以像局域网一样轻松访问和管理内网设备。 1.3 为什么我选择Windows作为终端server？最主要原因，是因为我的NAS(网络附属存储)不支持docker(轻量级容器技术)，它也就变相的不支持部署Wireguard。作为家里的第二大常驻设备，我把目光瞄准到了我的PC。虽然Windows的系统使它注定无法24小时开机，但是Wake On LAN(局域网唤醒)完美的弥补了这一点。想要组网时，我远程唤醒PC开机即可。至于为什么不把设备刷成Linux，我只能说它不止是一台server，还有别的作用(剪辑、设计、游戏)。而且使用wsl2+docker，上面完全可以部署我的服务，充当服务器的作用。 2 部署2.1 网络环境 对于有公网ip地址的，配置路由器的端口转发即可。 对于ipv4，在NAT1的环境下，邪修使用Natter可以拿到临时公网ip。(UDP在ipv4环境跨区丢包很严重，这里不推荐没有公网ip的使用) 对于ipv6，尽量保证server环境处于NAT1，使用DDNS-GO可以将拿到的动态ipv6通过域名解析绑定到某个域名，从而实现稳定的使用。点我传送到DDNS-GO 请注意：用路由器给server分配固定ip并开启DMZ主机，确保网络环境的稳定性。 2.2 一键部署Windows下想要完全启用Wireguard的功能，需要更改众多配置。好在已经有前人帮我们早好了轮子Wg Server for Windows，我们直接拿来用即可。 1.工具下载 从releases下载WS4W最新版本。我的版本是2.1.4。安装完成后得到如下界面：WS4W界面图 2.下载Wireguard 点击Download and install Wireguard，根据指引一键自动下载安装。 3.配置Server 点击Edit server configuration，进入server配置页面。server配置页其中Endpoint填写ip:端口(和Listen Port一致)，ip全面支持ipv4，ipv6，域名。两个Key点击Generate自动生成。其余配置照抄即可，这里不过多赘述。 3.配置clients(Server端) 点击Configure client，进入client配置页面。client配置页点击Add Client，会弹出类似上图的界面。配置客户端信息，大部分可以直接Generate自动生成。要注意的是Allowed IPs配置每个客户端通过Wireguard的流量。在这里配置的所有ip段的流量都会被导向Wireguard server。比如我的配置中，除了Address流量，还有192.168.0网段的所有流量都会导向Wireguard Server转发。我这样配置不仅可以让虚拟局域网内设备相互关联，还可以从Client访问Server所在局域网。点击Export configuration File可以生成一个文件供客户端使用。手机端还可以直接生成二维码。点击Save保存。 4.配置clients(客户端) 客户端下载Wireguard，导入生成的那个文件直接应用配置即可。以Windows为例，配置文件应该如下所示：Windows配置注意：将AllowedIPs中的10.8.0.X/32修改成整个网段，即10.8.0.0/24。 5.Server剩余配置 依次点击Install tunnel service，Make private，Enable NAT，完成剩余配置。成功后界面如下：成功配置 不出意外的话到这里为止部署就成功了。WS4W只是一个配置工具，关闭即可，真正的配置已经落实到Windows的各个角落。 3 一些细节收尾3.1 在 Windows 上启用路由功能 启用路由功能模拟端口转发，实现节点间通信 powershell1Set-ItemProperty -Path &quot;HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters&quot; -Name &quot;IPEnableRouter&quot; -Value 1 在服务中找到Routing and Remote Access，设置启动类型为自动，然后启动这个服务。 3.2 配置 Windows 防火墙 允许 ICMP 回显请求（即 ping 请求） powershell1New-NetFirewallRule -DisplayName &quot;Allow ICMPv4-In&quot; -Protocol ICMPv4 -IcmpType 8 -Enabled True -Action Allow -Profile Any 视情况开放Server的51820端口(如果Client不能连接) 到这里你的Windows已经成为Wireguard Server啦！","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.xinghenluyus.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"异地组网","slug":"异地组网","permalink":"https://blog.xinghenluyus.cn/tags/%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/"}]},{"title":"解决huggingface.co无法访问","slug":"2025-7-28","date":"2025-07-27T16:00:00.000Z","updated":"2025-08-18T06:10:13.359Z","comments":true,"path":"2025/07/28/2025-7-28/","permalink":"https://blog.xinghenluyus.cn/2025/07/28/2025-7-28/","excerpt":"","text":"将huggingface.co换成镜像源hf-mirror.com即可解决问题。 1解决方法：export HF_ENDPOINT=https://hf-mirror.com （可以写入到~/.bashrc中，长久可用） windows可以创建名为HF_ENDPOINT的系统环境变量，值为https://hf-mirror.com。 参考内容如下，如果环境中有HF_ENDPOINT的设定就会采用该设定作为前缀，即上面镜像的https://hf-mirror.com而非默认的https://huggingface.co。 /path/to/env/site-packages/huggingface_hub/constants.py","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.xinghenluyus.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"踩坑日记","slug":"踩坑日记","permalink":"https://blog.xinghenluyus.cn/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"}]},{"title":"SakuraFrp隧道开启https，使用个人域名并配置SSL","slug":"2025-6-27","date":"2025-06-26T16:00:00.000Z","updated":"2025-08-18T06:10:25.165Z","comments":true,"path":"2025/06/27/2025-6-27/","permalink":"https://blog.xinghenluyus.cn/2025/06/27/2025-6-27/","excerpt":"","text":"官方配置文档传送门https://doc.natfrp.com/frpc/ssl.html 我是在项目开发的过程中暂时暴露后端服务与前端通信时遇到的问题。浏览器限制要求必须使用https协议，然而Sakura自带的自签名证书会报错，甚至导致部分服务无法使用。一气之下决定彻底解决这个问题。 1 准备工作首先，你要拥有一个自己的域名。我的域名都是腾讯云的。SSL证书的注册要求是你自己的域名。 学术研究可以考虑使用纯数字（6位，8位都可）.xyz ，十来块一年很便宜。作为常用域名还是推荐.cn后缀，国内域名，常见权威，关键是比.com便宜一大截。 然后，要有一个Sakura的账号和frpc。这里不过多赘述。 2 注册证书 这里使用 Zero SSL 1 注册账号后，跟随图片指引填写信息。注意不要选任何付费项(pro)。 123、一路next 2 选择DNS验证域名所属。记住下图信息，然后打开腾讯云控制台，创建一个CNAME解析。注意主机记录不要包括你的域名，只要前面的二级域名，也就是到XXX.sakura为止。记录值就是point to的内容照抄。 3 这个解析验证后可以删除。 123 4 等待解析验证通过，证书马上就下来 这个页面就成功了，可以下载证书了 5 按照上图指引，选择NGINX，然后下载，证书下载成功。 3 配置证书3.1 配置SSL解压下载下来的文件后，会得到3个文件，certificate.crt,ca_bundle.crt,private.key。 打开 certificate.crt 文件，复制所有内容。 打开 ca_bundle.crt 文件，复制所有内容。 创建一个新的文本文件，命名为 sakura.xinghenluyus.cn.crt。(你的域名.crt,下文以同理) 将 certificate.crt 的内容粘贴到新文件中。 在新文件末尾添加一个空行。 将 ca_bundle.crt 的内容粘贴到新文件中。 最终的 sakura.xinghenluyus.cn.crt 文件应该看起来像这样： frp.xinghenluyus.cn.crt1234567-----BEGIN CERTIFICATE-----... (your domain certificate content) ...-----END CERTIFICATE----------BEGIN CERTIFICATE-----... (intermediate certificate chain content) ...-----END CERTIFICATE----- 将 private.key 改名为 sakura.xinghenluyus.cn.key 。(你的域名.key) 最终得到sakura.xinghenluyus.cn.crt和sakura.xinghenluyus.cn.key。 3.2 配置SakuraFrp启动器 开启自动HTTPS，填入注册证书的域名。 开启https 启动器进入 设置 -&gt; 打开工作目录 ,进入 FrpcWorkingDirectory 文件夹。(frpc类似，也有这个文件夹) 打开工作目录 将 sakura.xinghenluyus.cn.crt和sakura.xinghenluyus.cn.key 都粘贴到当前文件夹，如果有就覆盖系统自带的。 3.3 配置域名解析 进入腾讯云的解析，新建CNAME解析，主机记录填sakura,记录值控制台日志里抄。 新建记录 记录值来源： 记录值来自控制台日志 3.4 成功示例 开启隧道，查看控制台，证书是否加载成功。出现下图界面则成功 成功示例 这时可以浏览器连接测试，发现弹出安全警告了。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.xinghenluyus.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"踩坑日记","slug":"踩坑日记","permalink":"https://blog.xinghenluyus.cn/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"}]},{"title":"Spring Boot 集成 Redis 缓存并使用 FastJSON2 作为序列化器的完整配置指南","slug":"2025-6-12","date":"2025-06-11T16:00:00.000Z","updated":"2025-08-18T06:10:33.107Z","comments":true,"path":"2025/06/12/2025-6-12/","permalink":"https://blog.xinghenluyus.cn/2025/06/12/2025-6-12/","excerpt":"","text":"在现代 Web 应用中，缓存是提升系统性能和减少数据库压力的重要手段。在最基本的SSM开发过程中，Springboot可以方便的将缓存和Redis集成，可以十分便捷的用注解开发。 个人情怀让我使用fastjson。升级到fastjson2后，原本的autotype被废除，不管是官方给出的代码示例还是论坛社区，都没有对泛型数据的支持，对于特定需求使用起来很不方便。 泛型：如果你有一个普通 Java Bean (FileEntity) ，那么List, Map&lt;String, Object&gt; 等就是泛型集合 1 引入依赖 Springboot版本采用3.2.3 pom.xml12345678910111213141516&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt; &lt;artifactId&gt;fastjson2&lt;/artifactId&gt; &lt;version&gt;2.0.57&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt; &lt;artifactId&gt;fastjson2-extension-spring6&lt;/artifactId&gt; &lt;version&gt;2.0.57&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2 创建自定义序列器 自定义 FastJSON2 序列化器（支持泛型） FastJsonRedisSerializer.java12345678910111213141516171819202122232425262728293031323334353637383940package com.example.demo.config;import com.alibaba.fastjson2.JSON;import com.alibaba.fastjson2.JSONReader;import com.alibaba.fastjson2.TypeReference;import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.data.redis.serializer.SerializationException;import java.lang.reflect.Type;public class FastJsonRedisSerializer&lt;T&gt; implements RedisSerializer&lt;T&gt; &#123; private static final JSONReader.Filter AUTO_TYPE_FILTER = JSONReader.autoTypeFilter( &quot;com.example.demo.entity.&quot;, // 替换为你的实体包名 &quot;java.util.ArrayList&quot;, &quot;java.util.HashMap&quot; ); private final Type type; public FastJsonRedisSerializer(Type type) &#123; this.type = type; &#125; public FastJsonRedisSerializer(Class&lt;T&gt; clazz) &#123; this.type = clazz; &#125; @Override public byte[] serialize(T t) throws SerializationException &#123; if (t == null) return new byte[0]; return JSON.toJSONBytes(t, JSON.Feature.WriteClassName); &#125; @Override public T deserialize(byte[] bytes) throws SerializationException &#123; if (bytes == null || bytes.length == 0) return null; return JSON.parseObject(bytes, type, AUTO_TYPE_FILTER, JSON.Feature.SupportAutoType); &#125;&#125; String 类型专用序列化器 FastJson2StringRedisSerializer.java12345678910111213141516171819package com.example.demo.config;import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.data.redis.serializer.SerializationException;import java.nio.charset.StandardCharsets;public class FastJson2StringRedisSerializer implements RedisSerializer&lt;String&gt; &#123; @Override public byte[] serialize(String s) throws SerializationException &#123; return s == null ? new byte[0] : s.getBytes(StandardCharsets.UTF_8); &#125; @Override public String deserialize(byte[] bytes) throws SerializationException &#123; return bytes == null || bytes.length == 0 ? null : new String(bytes, StandardCharsets.UTF_8); &#125;&#125; 3 配置Config 配置 RedisTemplate RedisConfig.java123456789101112131415161718192021222324252627282930package com.example.demo.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.StringRedisSerializer;@Configurationpublic class RedisConfig &#123; @Bean public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123; RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;(); template.setConnectionFactory(factory); FastJsonRedisSerializer&lt;Object&gt; valueSerializer = new FastJsonRedisSerializer&lt;&gt;(Object.class); FastJson2StringRedisSerializer stringSerializer = new FastJson2StringRedisSerializer(); template.setKeySerializer(stringSerializer); // key: String template.setHashKeySerializer(stringSerializer); // hashKey: String template.setValueSerializer(valueSerializer); // value: 泛型对象 template.setHashValueSerializer(valueSerializer); // hashValue: 泛型对象 template.setDefaultSerializer(valueSerializer); template.setStringSerializer(stringSerializer); template.afterPropertiesSet(); return template; &#125;&#125; 配置 RedisCacheManager（用于 @Cacheable 等注解） RedisCacheConfig.java1234567891011121314151617181920212223242526272829package com.example.demo.config;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.cache.RedisCacheConfiguration;import org.springframework.data.redis.cache.RedisCacheManager;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.serializer.RedisSerializationContext;import java.time.Duration;@Configuration@EnableCachingpublic class RedisCacheConfig &#123; @Bean public RedisCacheManager redisCacheManager(RedisConnectionFactory factory) &#123; FastJsonRedisSerializer&lt;Object&gt; serializer = new FastJsonRedisSerializer&lt;&gt;(Object.class); RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig() .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer)) .entryTtl(Duration.ofMinutes(30)); // 设置缓存过期时间 return RedisCacheManager.builder(factory) .cacheDefaults(config) .build(); &#125;&#125; 到此配置全部完毕 4 Spring Cache 注解详解与使用示例4.1 @Cacheable用途：标记方法返回值需被缓存。若缓存存在，则直接返回；否则执行方法体并缓存结果。 12@Cacheable(value = &quot;fileCache&quot;, key = &quot;#id&quot;)FileEntity getFileById(UUID id); 4.2 @CachePut用途：更新缓存，总是执行方法并将结果写入缓存。 12@CachePut(value = &quot;fileCache&quot;, key = &quot;#result.id&quot;)FileEntity saveFile(FileEntity file); 4.3 @CacheEvict用途：清除缓存中的条目。 12@CacheEvict(value = &quot;fileCache&quot;, key = &quot;#id&quot;)void deleteFile(UUID id); 清空整个缓存区域： 12@CacheEvict(value = &quot;fileListCache&quot;, allEntries = true)void clearAllFiles(); 4.4 @CacheConfig用途：类级别共享缓存配置 1234567@CacheConfig(cacheNames = &quot;fileCache&quot;)public class FileService &#123; @Cacheable(key = &quot;#id&quot;) public FileEntity getFileById(UUID id) &#123; return fileMapper.selectById(id); &#125;&#125; 4.5 业务层使用示例123456789101112131415161718192021222324252627@Servicepublic class FileService &#123; @Autowired private FileRepository fileRepository; @Cacheable(value = &quot;fileCache&quot;, key = &quot;#id&quot;) public FileEntity getFileById(UUID id) &#123; return fileRepository.selectById(id); &#125; @CachePut(value = &quot;fileCache&quot;, key = &quot;#result.id&quot;) public FileEntity saveFile(FileEntity file) &#123; fileRepository.insert(file); return file; &#125; @CacheEvict(value = &quot;fileCache&quot;, key = &quot;#id&quot;) public void deleteFile(UUID id) &#123; fileRepository.deleteById(id); &#125; @Cacheable(value = &quot;fileListCache&quot;, key = &quot;&#x27;all&#x27;&quot;) public List&lt;FileEntity&gt; getAllFiles() &#123; return fileRepository.selectAll(); &#125;&#125;","categories":[{"name":"Java后端","slug":"Java后端","permalink":"https://blog.xinghenluyus.cn/categories/Java%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"踩坑日记","slug":"踩坑日记","permalink":"https://blog.xinghenluyus.cn/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"}]},{"title":"笔记本电脑扩容并将整个D盘迁移到新硬盘","slug":"2025-3-30","date":"2025-03-29T16:00:00.000Z","updated":"2025-08-18T06:10:48.737Z","comments":true,"path":"2025/03/30/2025-3-30/","permalink":"https://blog.xinghenluyus.cn/2025/03/30/2025-3-30/","excerpt":"","text":"相信小伙伴们在使用电脑时经常会出现电脑的硬盘不够用的情况。特别是C盘或者D盘的爆满，这时候单纯的加装硬盘只会让你凭空多一个盘，还是不能解决C盘或者D盘爆满的问题。 我的个人情况是C，D盘原本处于同一硬盘中，我利用磁盘迁移工具将整个D盘完美复制到了新的E盘，实现彻底的扩容。 下载工具DiskCopy对比多个工具，DiskCopy最简单易用，功能也较为完善，还很轻量。 自行前往相应网站下载，我的版本是DiskCopy_v1.4.2.0_Chs，打开后对应界面如下： 工具界面 开始迁移数据打开分区复制，选择对应的复制分区(原D盘)和目标分区(原E盘)，开始复制，接下来漫长等待即可。 由于我的已经修改了卷标，不要被我的F盘和D盘误导！ 分区复制 修改卷标搜索进入磁盘管理 磁盘管理 更改对应的卷标，把D先改成F，然后把E改成D。上图是修改好的样子 修改卷标 要是修改不成功应该是页面文件的问题，自行上网搜索解决。 重启电脑，验证文件特别是应用程序的完整性。没有发现问题的话F盘可以直接删除给C盘扩容啦！","categories":[{"name":"运维","slug":"运维","permalink":"https://blog.xinghenluyus.cn/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"磁盘管理","slug":"磁盘管理","permalink":"https://blog.xinghenluyus.cn/tags/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"}]},{"title":"中兴光猫(ZXHN 7000M)改桥接","slug":"2025-3-18","date":"2025-03-17T16:00:00.000Z","updated":"2025-08-18T06:10:56.311Z","comments":true,"path":"2025/03/18/2025-3-18/","permalink":"https://blog.xinghenluyus.cn/2025/03/18/2025-3-18/","excerpt":"","text":"我采用ztuOnu工具刷光猫进入telnet。话不多说，直接开始。 1 将光猫恢复出厂设置拔掉光纤，捅光猫的恢复出厂设置(RESET)按键，重置光猫。 光猫重置后，原先业务下发会被取消，内置的超级管理员账户会恢复初始默认的密码aDm8H%MdA，之后千万不要插入光纤，不然业务会下发，超级管理员密码会被运营商篡改。 2 下载工具ztuOnu到ztuOnu的github发布页，下载对应版本。 我下载的版本 将压缩包解压到一个特定文件夹里，接下来我们使用这个工具强行用telnet连接光猫。 3 一些准备工作 将电脑mac地址设置为000729553557 Windows需要启用telnet客户端 拔掉光猫上所有网线，用一根网线将光猫和电脑连接起来。 4 开始刷光猫进入工具所在的文件夹，空白地方右击 &gt; 显示更多选项 &gt; 在终端中打开 ,打开Powershell窗口。其它操作系统同理打开命令行即可。 使用new命令1.\\zteOnu.exe --ip &quot;192.168.1.1&quot; --new --user &quot;CMCCAdmin&quot; --pass &quot;aDm8H%MdA&quot; --port 80 --tp 23 --telnet 接下来的步骤一定要迅速，要是出现登录失败的情况，请重复上一步new命令。要是出现被锁定的情况，请等待5分钟重试。 登陆telnet1telnet 192.168.1.1 快速输入对应的账号和密码，账号Login为root ,密码password为Zte521。如果不成功，就重新刷到成功为止。 进入光猫telnet，这时不是想干什么干什么^~^,每个光猫都默认有一个拥有最高权限超级管理员和背面显示账号密码，供用户基础操作的普通用户。这里我选择把光猫背面的普通用户提升为超级管理员，经验证，插入光纤业务下发后不会还原这个设置，相当于绕过运营商拥有了光猫的最高权限。 把光猫背面的普通用户提升为超级管理员1sendcmd 1 DB set DevAuthInfo 1 Level 1 保存配置1sendcmd 1 DB save 更多配置可以自行上网查阅资料。本教程这里可以关闭命令行了。 5 最后一些配置 插上光纤，等待业务下发。 等待光猫状态正常后，进入192.168.1.1,使用光猫背面提权过的用户，登录光猫配置页面。 删掉光猫拨号的连接，新建一条bridge的连接，记住VLAN ID保持一致，见下图红色框框。VLAN ID因人而异。 光猫管理页 还原网线，路由器设置拨号上网即可。(不知道拨号账号密码的可以致电运营商询问) 经测试，不删除TR069也可以正常改桥接。TR069是运营商下发配置的连接，一般用来动态化超级管理员密码。OTHER是机顶盒连接。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.xinghenluyus.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"光猫","slug":"光猫","permalink":"https://blog.xinghenluyus.cn/tags/%E5%85%89%E7%8C%AB/"}]},{"title":"解决Windows下本地Maven仓库修改repository路径，文件夹始终为空","slug":"2025-3-15","date":"2025-03-14T16:00:00.000Z","updated":"2025-08-18T06:11:04.568Z","comments":true,"path":"2025/03/15/2025-3-15/","permalink":"https://blog.xinghenluyus.cn/2025/03/15/2025-3-15/","excerpt":"","text":"我在使用IDEA构建Springboot项目时，修改了项目的默认Maven，改成了我新下载的本地Maven仓库。 在使用.xml文件进行配置时，IDEA报错： 1未解析的依赖项: &#x27;org.mybatis:mybatis-spring:jar:2.0.6&#x27; 我在网上搜索了各种教程和相关资料，都没有得到解决。最后当我打开Maven的自定义本地仓库文件夹，居然发现里面是空的！ 检查了环境变量，又检查了配置文件，均未发现异常。经排查，原因如下: 我将Maven根目录放在了D:\\Program Files\\apache-maven-3.9.9,而Program Files文件夹的权限是管理员权限(猜测是之前安装什么环境时用安装程序安装，导致文件夹权限变高)。 默认没有管理员权限只可读 为了不破坏原有程序文件，我将Maven根目录移动到D:\\Program Files (x86)\\apache-maven-3.9.9,重新配置环境变量和配置文件，重启IDEA，问题解决。 PS：猜测只报错一个依赖的原因不是出在依赖本身，而是拉取第一个依赖就无法写入，后续依赖的拉取自动被停止，只报错了第一个依赖，导致误判出错原因。大家要养成良好的安装习惯！","categories":[{"name":"软件下载","slug":"软件下载","permalink":"https://blog.xinghenluyus.cn/categories/%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD/"}],"tags":[{"name":"踩坑日记","slug":"踩坑日记","permalink":"https://blog.xinghenluyus.cn/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"}]},{"title":"从零搭建个人博客（基于Hexo，使用Volantis主题，部署在github并上传cdn）","slug":"2025-3-10","date":"2025-03-09T16:00:00.000Z","updated":"2025-08-18T06:49:38.171Z","comments":true,"path":"2025/03/10/2025-3-10/","permalink":"https://blog.xinghenluyus.cn/2025/03/10/2025-3-10/","excerpt":"","text":"这是我的第一篇博客，也是本站的部署记录。 1 前言相信每一个想部署个人博客的小伙伴们都想快速上手个人博客。在众多框架中，hexo以庞大的使用群体胜出，成为了我的选择。而Volantis主题又以清新脱俗的小众化吸引了我的注意。 在网站的部署上，我选择部署在GitHub pages（毕竟谁不喜欢有稳定又白能嫖的渠道呢）。碍于国内访问速度过慢，我将网站上传CDN提升国内访问速度，并使用了自己的域名blog.xinghenluyus.cn. 本站仅提供个人部署思路. 2 Hexo安装2.1 环境配置 安装Node.js 安装Git 具体教材可以自行上网搜索 2.2 安装Hexo点击这里前往Hexo官方文档。 全局安装npm 1234npm install -g hexo-cli//国内镜像源也可以使用cnpm install -g hexo-cli 初始化博客文件夹 12//cd到要存放博客的本地文件夹hexo init myblog 安装相关依赖 12cd myblognpm install 启动服务 12hexo g hexo server 按照提示打开浏览器 访问http://localhost:4000/,出现下图界面则部署成功。本地浏览器界面 之后，就可以在source/_posts中创建md文件写自己的代码啦，也可以用new命令，个人感觉没必要，直接创建，省时省力。 每次更改Hexo代码后，都要重新启动服务 2.3 部署到GitHub Pages如果你跟我一样把网站托管到GitHub，最好是有一个科学上网工具。 创建GitHub仓库 登录GitHub，new 一个 Repository，Repository name一定要是你的用户名.github.io。如下图所示，报错是因为仓库已经存在。新建仓库页面第一次使用时出现下图报错，推荐直接删除仓库重新创建！ 安装git插件 1npm install hexo-deployer-git --save 修改blog/_config.yml配置文件 找到下文代码段，覆盖修改。其中yourname替换成自己的github用户名。blog/_config.yml1234567# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repository: https://github.com/yourname/yourname.github.io.git branch: main 全部完成后，执行如下命令： 12hexo c &amp;&amp; hexo g &amp;&amp; hexo d # hexo d 表示执行部署, hexo c 会清除hexo g 生成的文件，一般连用 命令行最后一行输出如下信息则表示上传成功： 1INFO Total precache size is about 1.98 MB for 26 resources. 执行成功可以通过yourname.github.io来访问博客了。 2.4 安装Volantis主题（可选）传送门 Volantis官方文档 这里我采用npm安装 在blog/_config.yml文件中找到并修改： blog/_config.yml1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: volantis npm下载主题 12//cd到个人博客本地根目录npm i hexo-theme-volantis 2.5 配置Volantis主题（可选）博客根目录下新建 _config.volantis.yml文件,这是主题自带的配置文件，可以覆盖blog\\node_modules\\hexo-theme-volantis下_config.yml的配置，起到主题全局配置的作用。 这里推荐一个我参考的博客，具体配置这里不再赘述： 给自己的hexo博客个性化Volantis主题https://blog.csdn.net/qq_42887663/article/details/128209285 我的_config.volantis.yml文件 (点击展开) blog/_config.volantis.yml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670############################### Navigation Bar ############################### &gt; start# 注意事项：建议规范全站路径 URL 最后带一个 &quot;/&quot; 例如 &quot;about/&quot;navbar: visiable: auto # always, auto logo: # choose [img] or [icon + title] img: volantis-static/media/org.volantis/blog/Logo-NavBar@3x.png # https://gcore.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png icon: title: menu: - name: 博客 icon: fa-solid fa-rss url: / - name: 分类 icon: fa-solid fa-folder-open url: categories/ - name: 标签 icon: fa-solid fa-tags url: tags/ - name: 归档 icon: fa-solid fa-archive url: archives/ - name: 友链 icon: fa-solid fa-link url: friends/ - name: 关于 icon: fa-solid fa-info-circle url: about/ search: Search... # Search bar placeholder############################### Navigation Bar ############################### &gt; end############################### Cover ############################### &gt; startcover: height_scheme: full # full, half layout_scheme: dock # blank (留白), search (搜索), dock (坞), featured (精选), focus (焦点) display: home: true archive: true others: false # can be written in front-matter &#x27;cover: true&#x27; background: #https://gcore.jsdelivr.net/gh/MHG-LAB/cron@gh-pages/bing/bing.jpg # background: https://bing.ioliu.cn/v1/rand?w=1920&amp;h=1200 logo: # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-Cover@3x.png title: &#x27;&lt;font&gt;&lt;span&gt;Hello&lt;/span&gt; &lt;span&gt;Travelers&lt;/span&gt;&lt;/font&gt;&#x27; subtitle: &lt;div id=&quot;binft&quot;&gt;&lt;/div&gt; search: 在这里搜索Luyus的博客 # search bar placeholder features: - name: 主页 icon: # url: / - name: 分类 icon: # url: categories/ - name: 标签 icon: # url: tags/ - name: 归档 icon: # url: archives/ - name: 友链 icon: # url: friends/ - name: 关于 icon: # url: about/############################### Cover ############################### &gt; endpages: # 友链页面配置 friends: layout_scheme: simple # simple: 简单布局, traditional: 传统布局search: enable: true service: hexo### 自定义右键 新rightmenus: enable: true # 右键菜单项及加载顺序 # 内容示例：plugins.[组名], menus.[组名], hr(分割线，推荐去线留白), music(音乐控制器) order: - plugins.navigation - hr - plugins.inputBox #文本输入框 - plugins.seletctText #选中文本 - plugins.elementCheck #链接判断 - plugins.elementImage #图片判断 - menus.link - hr - menus.darkMode - plugins.articlePage - hr - music ############################ # - &#123;id: &#x27;&#x27;, name: &#x27;&#x27;, icon: &#x27;&#x27;, link: &#x27;&#x27;, event: &#x27;&#x27;, group: &#x27;&#x27;&#125; # id: 唯一值 # name: 用于菜单名称显示 # icon: 用于菜单图标显示 # link: 跳转链接 # event: 事件，当输入内容不为内置事件时，作 JavaScript 代码执行 # group: 菜单项所处分组名称 # 注： # 1. link/event 二选一，同时出现时仅处理 link # 2. 内置事件列表： copyText, copyLink, copyPaste, copyAll, copyCut, copyImg, printMode, readMode # 3. 内置组列表：navigation, inputBox, seletctText, elementCheck, elementImage, articlePage # 4. plugins 列允许自定义组内项目 # 5. menus 列允许自定义组及其内容 # 6. 除 navigation 外的内置组，在显示时会隐藏含 link 属性的菜单项 ########################### # 基础项设置 options: # 图标前缀 fa-solid, fa-regular, fa-light, fa-thin, fa-duotone, fa-brands iconPrefix: fa-solid # 例外，在 articlePage 组显示时（文章页）时依旧显示含 link 属性的菜单项 articleShowLink: true # 当设定全局音乐播放器时，是否一直显示音乐控制菜单。false：仅当音乐播放时启用 musicAlwaysShow: true # 适用于复制图片文件的场景，当图片源未设置 Access-Control-Allow-Origin 时，图片复制由于 CORS 问题失败 # 你可以自行部署相应项目解决该问题，详见：https://github.com/Rob--W/cors-anywhere 或者 https://github.com/Zibri/cloudflare-cors-anywhere corsAnywhere: # 右键内置组，预置实现 plugins: # 导航组件 # 横向排列，共用一行，仅显示图标 (原则上支持的数量不限) navigation: - &#123;id: &#x27;left&#x27;, name: &#x27;转到上一页&#x27;, icon: &#x27;fa-solid fa-arrow-left&#x27;, event: &#x27;history.back()&#x27;, group: &#x27;navigation&#x27;&#125; - &#123;id: &#x27;right&#x27;, name: &#x27;转到下一页&#x27;, icon: &#x27;fa-solid fa-arrow-right&#x27;, event: &#x27;history.forward()&#x27;, group: &#x27;navigation&#x27;&#125; - &#123;id: &#x27;redo&#x27;, name: &#x27;刷新当前页面&#x27;, icon: &#x27;fa-solid fa-redo&#x27;, event: &#x27;window.location.reload()&#x27;, group: &#x27;navigation&#x27;&#125; - &#123;id: &#x27;up&#x27;, name: &#x27;回到顶部&#x27;, icon: &#x27;fa-solid fa-arrow-up&#x27;, event: &#x27;VolantisApp.scrolltoElement(volantis.dom.bodyAnchor)&#x27;, group: &#x27;navigation&#x27;&#125; # - &#123;id: &#x27;home&#x27;, name: &#x27;回到首页&#x27;, icon: &#x27;fa-solid fa-home&#x27;, link: &#x27;/&#x27;, group: &#x27;navigation&#x27;&#125; # 文本输入框相关组件 # 生效于 input/textarea，粘贴、剪切、全选 inputBox: - &#123;id: &#x27;copyPaste&#x27;, name: &#x27;粘贴文本&#x27;, icon: &#x27;fa-solid fa-paste&#x27;, event: &#x27;copyPaste&#x27;, group: &#x27;inputBox&#x27;&#125; - &#123;id: &#x27;copyAll&#x27;, name: &#x27;全选文本&#x27;, icon: &#x27;fa-solid fa-object-ungroup&#x27;, event: &#x27;copyAll&#x27;, group: &#x27;inputBox&#x27;&#125; - &#123;id: &#x27;copyCut&#x27;, name: &#x27;剪切文本&#x27;, icon: &#x27;fa-solid fa-cut&#x27;, event: &#x27;copyCut&#x27;, group: &#x27;inputBox&#x27;&#125; # 文本选中类组件 # 生效于右键选中文本，__text__ 为选中的文本。 seletctText: - &#123;id: &#x27;copyText&#x27;, name: &#x27;复制文本&#x27;, icon: &#x27;fa-solid fa-copy&#x27;, event: &#x27;copyText&#x27;, group: &#x27;seletctText&#x27;&#125; - &#123;id: &#x27;searchWord&#x27;, name: &#x27;站内搜索&#x27;, icon: &#x27;fa-solid fa-search&#x27;, event: &#x27;OpenSearch(__text__)&#x27;, group: &#x27;seletctText&#x27;&#125; - &#123;id: &#x27;bingSearch&#x27;, name: &#x27;必应搜索&#x27;, icon: &#x27;fa-solid fa-search&#x27;, event: &#x27;window.open(`https://cn.bing.com/search?q=$&#123;__text__&#125;`)&#x27;, group: &#x27;seletctText&#x27;&#125; #- &#123;id: &#x27;googleSearch&#x27;, name: &#x27;谷歌搜索&#x27;, icon: &#x27;fa-solid fa-search&#x27;, event: &#x27;window.open(`https://www.google.com/search?q=$&#123;__text__&#125;`)&#x27;, group: &#x27;seletctText&#x27;&#125; # 链接判断组件 # 生效于链接处的右键行为，__link__ 为链接地址 elementCheck: - &#123;id: &#x27;openTab&#x27;, name: &#x27;新标签页打开&#x27;, icon: &#x27;fa-solid fa-external-link-square-alt&#x27;, event: &#x27;window.open(__link__)&#x27;, group: &#x27;elementCheck&#x27;&#125; - &#123;id: &#x27;copyLink&#x27;, name: &#x27;复制链接地址&#x27;, icon: &#x27;fa-solid fa-link&#x27;, event: &#x27;copyLink&#x27;, group: &#x27;elementCheck&#x27;&#125; # 图片判断类组件 # 生效于图片类的右键行为，__link__ 为链接地址 elementImage: - &#123;id: &#x27;openImg&#x27;, name: &#x27;打开图片&#x27;, icon: &#x27;fa-solid fa-image&#x27;, event: &#x27;window.open(`$&#123;__link__&#125;`)&#x27;, group: &#x27;elementImage&#x27;&#125; # - &#123;id: &#x27;copyImg&#x27;, name: &#x27;复制图片&#x27;, icon: &#x27;fa-solid fa-image&#x27;, event: &#x27;copyImg&#x27;, group: &#x27;elementImage&#x27;&#125; # - &#123;id: &#x27;googleImg&#x27;, name: &#x27;谷歌识图&#x27;, icon: &#x27;fa-solid fa-images&#x27;, event: &#x27;window.open(`https://www.google.com.hk/searchbyimage?image_url=$&#123;__link__&#125;`)&#x27;, group: &#x27;elementImage&#x27;&#125; # 文章页面组件 # 生效于 post.article 页面 articlePage: # - &#123;id: &#x27;printMode&#x27;, name: &#x27;打印页面&#x27;, icon: &#x27;fa-solid fa-print&#x27;, event: &#x27;printMode&#x27;, group: &#x27;articlePage&#x27;&#125; - &#123;id: &#x27;readMode&#x27;, name: &#x27;阅读模式&#x27;, icon: &#x27;fa-solid fa-book-open&#x27;, event: &#x27;readMode&#x27;, group: &#x27;articlePage&#x27;&#125; # 右键自定义菜单区域 menus: link: - &#123;id: &#x27;home&#x27;, name: &#x27;回到首页&#x27;, icon: &#x27;fa-solid fa-home&#x27;, link: &#x27;/&#x27;, group: &#x27;link&#x27;&#125; - &#123;id: &#x27;openBgImg&#x27;, name: &#x27;查看背景&#x27;, icon: &#x27;fa-solid fa-cloud&#x27;, event: &#x27;openCurrentBgImage()&#x27;, group: &#x27;link&#x27;&#125; # - &#123;id: &#x27;help&#x27;, name: &#x27;常见问题&#x27;, icon: &#x27;fa-solid fa-question&#x27;, link: &#x27;https://volantis.js.org/faqs/&#x27;, group: &#x27;link&#x27;&#125; # - &#123;id: &#x27;examples&#x27;, name: &#x27;示例博客&#x27;, icon: &#x27;fa-solid fa-rss&#x27;, link: &#x27;https://volantis.js.org/examples/&#x27;, group: &#x27;link&#x27;&#125; # - &#123;id: &#x27;contributors&#x27;, name: &#x27;加入社区&#x27;, icon: &#x27;fa-solid fa-fan&#x27;, link: &#x27;https://volantis.js.org/contributors/&#x27;, group: &#x27;link&#x27;&#125; # - hr # - &#123;id: &#x27;source_docs&#x27;, name: &#x27;本站源码&#x27;, icon: &#x27;fa-solid fa-code-branch&#x27;, link: &#x27;https://github.com/volantis-x/volantis-docs/&#x27;, group: &#x27;link&#x27;&#125; # - &#123;id: &#x27;source_theme&#x27;, name: &#x27;主题源码&#x27;, icon: &#x27;fa-solid fa-code-branch&#x27;, link: &#x27;https://github.com/volantis-x/hexo-theme-volantis/&#x27;, group: &#x27;link&#x27;&#125; darkMode: - &#123;id: &#x27;darkMode&#x27;, name: &#x27;暗黑模式&#x27;, icon: &#x27;fa-solid fa-moon&#x27;, event: &#x27;volantis.dark.toggle()&#x27;, group: &#x27;darkMode&#x27;&#125;################################## Sidebar ############################### &gt; startsidebar: position: right # left right # 主页、分类、归档等独立页面 for_page: [blogger, category, tagcloud, webinfo] # layout: docs/post 这类文章页面 for_post: [blogger, toc] # 侧边栏组件库 widget_library: # --------------------------------------- # blogger info widget blogger: class: blogger display: [desktop, mobile] # [desktop, mobile] avatar: volantis-static/media/org.volantis/blog/Logo-NavBar@3x.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/Logo-NavBar@3x.png shape: rectangle # circle, rectangle url: /about/ title: ####### subtitle: jinrishici: false # Poetry Today. You can set a string, and it will be displayed when loading fails. customword: 一个专注于分享踩坑的小站. social: - icon: fas fa-rss url: https://github.com/volantis-x/hexo-theme-volantis/ - icon: fa-solid fa-envelope url: mailto:2593026969@qq.com - icon: fab fa-github url: https://github.com/xinghenLuyus/ # --------------------------------------- # toc widget (valid only in articles) toc: class: toc display: [desktop, mobile] # [desktop, mobile] sticky: true header: icon: fa-solid fa-list title: 本文目录 list_number: false min_depth: 2 max_depth: 5 # --------------------------------------- # music music: class: music display: [desktop, mobile] # [desktop, mobile] pjaxReload: false # --------------------------------------- # category widget category: class: category display: [desktop] # [desktop, mobile] header: icon: fa-solid fa-folder-open title: 文章分类 url: /blog/categories/ # --------------------------------------- # tagcloud widget tagcloud: class: tagcloud display: [desktop, mobile] # [desktop, mobile] header: icon: fa-solid fa-tags title: 热门标签 url: /blog/tags/ min_font: 14 max_font: 24 color: true start_color: &#x27;#999&#x27; end_color: &#x27;#555&#x27; # --------------------------------------- # webinfo widget webinfo: class: webinfo display: [desktop] header: icon: fa-solid fa-award title: 站点信息 type: article: enable: true text: &#x27;文章数目：&#x27; unit: &#x27;篇&#x27; runtime: enable: false data: &#x27;2025/02/28&#x27; # 填写建站日期 text: &#x27;已运行时间：&#x27; unit: &#x27;天&#x27; wordcount: enable: true text: &#x27;本站总字数：&#x27; # 需要启用 wordcount unit: &#x27;字&#x27; visitcounter: siteuv: enable: true text: &#x27;本站访客数：&#x27; unit: &#x27;人&#x27; sitepv: enable: true text: &#x27;本站总访问量：&#x27; unit: &#x27;次&#x27; lastupd: enable: true friendlyShow: true # 更友好的时间显示 text: &#x27;最后活动时间：&#x27; unit: &#x27;日&#x27; # --------------------------------------- # lastupdate widget lastupdate: class: lastupdate display: [desktop, mobile] header: icon: fa-solid fa-clock WISTERIA title: 最近更新############################### Sidebar ############################### &gt; end#自定义网页底部site_footer: # layout of footer: [aplayer, social, license, info, copyright] layout: [aplayer, copyright] copyright: &#x27;[欣赏一下我喜欢的歌呀~](/)&#x27; # You can add your own property here. (Support markdown, for example: br: &#x27;&lt;br&gt;&#x27;)plugins: # 文章字数统计、阅读时长，开启需要安装插件: npm i --save hexo-wordcount wordcount: enable: true # 暗黑模式 darkmode # 开关按钮：在 navbar.menu 中添加： # - name: 暗黑模式 # 可自定义 # icon: fa-solid fa-moon # 可自定义 # toggle: darkmode darkmode: enable: true # APlayer is only available in mainland China. # APlayer config: https://github.com/metowolf/MetingJS aplayer: enable: true # Required server: netease # netease, tencent, kugou, xiami, baidu歌曲的网站 type: song # song, playlist, album, search, artist 歌曲或者歌单、专辑等 id: ####### # song id / playlist id / album id / search keyword歌曲或者歌单的id # Optional fixed: false # enable fixed mode theme: &#x27;#1BCDFC&#x27; # main color autoplay: false # audio autoplay是否自动播放 order: list # player play order, values: &#x27;list&#x27;, &#x27;random&#x27; loop: one # player loop play, values: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27; volume: 0.7 # default volume, notice that player will remember user setting, default volume will not work after user set volume themselves list_max_height: 320px # list max height list_folded: true autoHide: false # hide automaticaly是否要隐藏 parallax: #背景设置 enable: true position: fixed # cover: sticky on the cover. fixed: Fixed as background for the site. shuffle: true # shuffle playlist duration: 10000 # Duration (ms) fade: 1500 # fade duration (ms) (Not more than 1500) images: # For personal use only. At your own risk if used for commercial purposes !!! - https://your.cdn.url############################### Article Layout ############################### &gt; start# 文章布局article: # 文章列表页面的文章卡片布局方案 preview: scheme: lanscape # landscape # pin icon for post pin_icon: volantis-static/media/twemoji/assets/svg/1f4cc.svg # https://cdn.jsdelivr.net/gh/twitter/twemoji@13.0/assets/svg/1f4cc.svg # auto generate title if not exist auto_title: true # false, true # auto generate excerpt if not exist auto_excerpt: true # false, true # hide excerpt hide_excerpt: false # show split line or not line_style: solid # hidden, solid, dashed, dotted # show author author: false # true, false # show readmore button readmore: auto # auto, always # 文章详情页面的文章卡片本体布局方案 body: # 文章顶部信息 # 从 meta_library 中取 top_meta: [date, category, tags, counter] #启用评论数量需在此添加 # 文章底部信息 # 从 meta_library 中取 bottom_meta: [updated, wordcount, walinecount, share] # ---------------- # 文章页脚组件 footer_widget: # ---------------- # 参考资料、相关资料等 (for layout: post/docs) references: title: 参考资料 icon: fa-solid fa-quote-left # 在 front-matter 中: # references: # - title: 某篇文章 # url: https:// # 即可显示此组件。 # ---------------- # 相关文章，需要安装插件 (for layout: post) # npm i hexo-related-popular-posts related_posts: enable: false title: 相关文章 icon: fa-solid fa-bookmark max_count: 5 # 设为空则不使用文章头图 placeholder_img: https://gcore.jsdelivr.net/gh/MHG-LAB/cron@gh-pages/bing/bing.jpg # ---------------- # 版权声明组件 (for layout: post) copyright: enable: false permalink: &#x27;本文永久链接是：&#x27; content: - &#x27;博客内容遵循 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议&#x27; - permalink # 自定义版权组件：精细到文章的版权声明 custom: true # 开启后替代上方内容的版权显示 customData: default: type1 # 默认授权声明 ############################# # 你可以在文章的 front-matter 覆盖默认版权声明 # 配置示例（均可选）： # copyright: # type: type3 # 当前文章版权声明类型 # author: 张三 # 本文作者 # ref: # 原文出处 # title: # 原文出处 - 标题 # url: # 原文出处 - 链接 ############################# rules: type1: text: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh#&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt; desc: 署名-非商业性使用-相同方式共享 4.0 国际。 type2: text: 禁止转载引用 desc: 除非获得原作者的单独授权，任何第三方不得转载！ type3: text: 原作许可协议 desc: 本文转载自他站，转载或引用本文时，请遵守原作许可协议！ type4: text: 来自互联网 desc: 本文来自互联网，未知来源，侵权请联系删除。 type5: text: 允许规范转载 desc: 转载请保留本文转载地址，著作权归作者所有！ type6: text: 允许付费转载 desc: 您可以联系作者通过付费方式获得授权。 # 还能自行添加更多 # ---------------- # 打赏组件 (for layout: post) donate: enable: false images: - volantis-static/media/org.volantis/blog/qrcode/github@volantis.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png - volantis-static/media/org.volantis/blog/qrcode/github@volantis.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/qrcode/github@volantis.png # meta library meta_library: # 默认文章作者（可在 _data/author.yaml 中增加其他作者，并在 front-matter 中设置） # https://volantis.js.org/advanced-settings/#多人协同 author: avatar: #文章作者的头像 # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/blog/favicon/apple-touch-icon.png name: #作者名字 url: / # 文章创建日期 date: icon: fa-solid fa-calendar-alt title: &#x27;发布于：&#x27; format: &#x27;ll&#x27; # 日期格式 http://momentjs.com/docs/ # 文章更新日期 updated: icon: fa-solid fa-edit title: &#x27;更新于：&#x27; format: &#x27;ll&#x27; # 日期格式 http://momentjs.com/docs/ # 文章分类 category: icon: fa-solid fa-folder-open # 文章浏览计数 counter: icon: fa-solid fa-eye unit: &#x27;次浏览&#x27; # waline 文章评论数量 walinecount: icon: fa-solid fa-comment-dots desc: &#x27;条评论&#x27; # 条评论 # artalk 文章评论数量 artalkcount: icon: fa-solid fa-comment-dots desc: &#x27;条评论&#x27; # 条评论 # 文章字数和阅读时长 wordcount: icon_wordcount: fa-solid fa-keyboard icon_duration: fa-solid fa-hourglass-half # 文章标签 tags: icon: fa-solid fa-hashtag # 分享 share: - id: qq img: volantis-static/media/org.volantis/logo/128/qq.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/qq.png # - id: qzone # img: volantis-static/media/org.volantis/logo/128/qzone.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/qzone.png # - id: weibo # img: volantis-static/media/org.volantis/logo/128/weibo.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/weibo.png - id: qrcode # 当id为qrcode时需要安装插件 npm i hexo-helper-qrcode img: volantis-static/media/org.volantis/logo/128/wechat.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/wechat.png - id: telegram img: volantis-static/media/org.volantis/logo/128/telegram.png # https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/128/telegram.png############################### Article Layout ############################### &gt; endcustom_css: body: effect: [shadow, blur] # [shadow, floatable, blur] highlight: language: true # show language of codeblock grayscale: false # Enable grayscale effect text_align: # left, right, justify, center h1: left h2: left h3: left h4: left p: justify fontfamily: logofont: fontfamily: &#x27;&quot;Varela Round&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, Helvetica, Arial&#x27; name: &#x27;Varela Round&#x27; url: volantis-static/media/fonts/VarelaRound/VarelaRound-Regular.ttf # https://gcore.jsdelivr.net/gh/volantis-x/cdn-fonts/VarelaRound/VarelaRound-Regular.ttf weight: normal style: normal bodyfont: fontfamily: &#x27;UbuntuMono, &quot;Varela Round&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, Helvetica, Arial&#x27; name: &#x27;UbuntuMono&#x27; url: volantis-static/media/fonts/UbuntuMono/UbuntuMono-Regular.ttf # https://gcore.jsdelivr.net/gh/volantis-x/cdn-fonts/UbuntuMono/UbuntuMono-Regular.ttf weight: normal style: normal codefont: fontfamily: &#x27;Menlo, UbuntuMono, Monaco&#x27; name: &#x27;Monaco&#x27; url: volantis-static/media/fonts/Monaco/Monaco.ttf # https://gcore.jsdelivr.net/gh/volantis-x/cdn-fonts/Monaco/Monaco.ttf weight: normal style: normal scrollbar: size: 4px border: 2px color: &#x27;#2196f3&#x27; hover: &#x27;#ff5722&#x27;color_scheme: # ------------ # 通用颜色 common: # 主题色 theme: &#x27;#44D7B6&#x27; # 链接色 link: &#x27;#2196f3&#x27; # 按钮色 button: &#x27;#44D7B6&#x27; # 鼠标放到交互元素上时的色 hover: &#x27;#ff5722&#x27; # 主题色块内部的文字颜色 inner: &#x27;#fff&#x27; # 选中区域文字的背景颜色 selection: &#x27;alpha(#2196f3, 0.2)&#x27; # ------------ # 亮色主题（默认） light: # 网站背景色 site_bg: &#x27;#f4f4f4&#x27; # 网站背景上的文字 site_inner: &#x27;#fff&#x27; # 网站页脚文字 site_footer: &#x27;#fff&#x27; # 卡片背景色 card: &#x27;#fff&#x27; # 卡片上的普通文字 text: &#x27;#444&#x27; # 区块和代码块背景色 block: &#x27;#f6f6f6&#x27; # 代码块高亮时的背景色 codeblock: &#x27;#f6f6f6&#x27; # 行内代码颜色 inlinecode: &#x27;#D56D28&#x27; # 文章部分 h1: &#x27;#444&#x27; h2: &#x27;#444&#x27; h3: &#x27;#444&#x27; h4: &#x27;#444&#x27; h5: &#x27;#444&#x27; h6: &#x27;#444&#x27; p: &#x27;#444&#x27; # 列表文字 list: &#x27;#666&#x27; # 列表 hover 时的文字 list_hl: &#x27;mix($color-theme, #000, 80)&#x27; # 辅助性文字 meta: &#x27;#888&#x27; # ------------ # 暗色主题 dark: # 网站背景色 site_bg: &#x27;#222&#x27; # 网站背景上的文字 site_inner: &#x27;#eee&#x27; # 网站页脚文字 site_footer: &#x27;#aaa&#x27; # 卡片背景色 card: &#x27;#444&#x27; # 卡片上的普通文字 text: &#x27;#eee&#x27; # 区块和代码块背景色 block: &#x27;#3a3a3a&#x27; # 代码块高亮时的背景色 codeblock: &#x27;#343a3c&#x27; # 行内代码颜色 inlinecode: &#x27;#D56D28&#x27; # 文章部分 h1: &#x27;#eee&#x27; h2: &#x27;#eee&#x27; h3: &#x27;#ddd&#x27; h4: &#x27;#ddd&#x27; h5: &#x27;#ddd&#x27; h6: &#x27;#ddd&#x27; p: &#x27;#bbb&#x27; # 列表文字 list: &#x27;#aaa&#x27; # 列表 hover 时的文字 list_hl: &#x27;mix($color-theme, #fff, 80)&#x27; # 辅助性文字 meta: &#x27;#888&#x27; # 夜间图片亮度 brightness: 70% body: effect: [blur] # [shadow, floatable, blur] highlight: language: true # show language of codeblock copy_btn: true analytics: # 不蒜子访问统计 busuanzi: https://gcore.jsdelivr.net/gh/volantis-x/cdn-busuanzi@2.3/js/busuanzi.pure.mini.js leancloud: # 请使用自己的 id &amp; key 以防止数据丢失 app_id: # 应用 APP_ID app_key: # 应用 APP_KEY custom_api_server: # 国际版一般不需要写，除非自定义了 API Server############################### Comments ############################### &gt; startcomments: title: &lt;i class=&#x27;fa-solid fa-comments&#x27;&gt;&lt;/i&gt; 评论 subtitle: service: giscus # 可选评论系统 # # giscus # https://giscus.app # https://github.com/laymonage/giscus giscus: # 以下配置按照 yml 格式增删填写即可 repo: yourrepo/comments repo-id: ####### category: Announcements category-id: ####### mapping: &quot;pathname&quot; reactions-enabled: &quot;1&quot; emit-metadata: &quot;0&quot; lang: &quot;zh-CN&quot; # 以上配置按照 yml 格式增删填写即可 theme: light: &quot;light&quot; # https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/light.css dark: &quot;dark&quot; # https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/dark.css############################### Comments ############################### &gt; end 我的_config.yml(点击展开) blog/_config.yml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Luyus&#x27; Blogsubtitle: &#x27;A website for recording technical learning&#x27;description: &#x27;星痕的个人博客——Luyus的技术之旅，专注于技术学习与分享。在这里，我将记录自己在编程、网络、运维等领域的探索历程，与你一同成长。Star Trace’s Personal Blog – Luyus’ Tech Journey, dedicated to the exploration and sharing of technology. Here, I document my adventures in programming, networking, and system operations, inviting you to grow alongside me.&#x27;keywords: blog, Luyus, tech, technology, programming, network, operation, system, development, learning, sharing, growth, exploration, adventure, journey, record, explore, discover, study, research, experience, knowledge, information, resource, guide, tutorial, solution, problem, challenge, solution, code, script, tool, software, hardware, service, platform, website, blog, post, article, content, writing, reading, thinking, idea, thought, opinion, view, perspective, insight, inspiration, motivation, encouragement, support, help, assistance, advice, suggestion, recommendation, reference, resource, linkauthor: Luyuslanguage: entimezone: &#x27;Asia/Shanghai&#x27;# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://your.cdn.blog/permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: enable: true # Open external links in new tab field: site # Apply to the whole site exclude: &#x27;&#x27;filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truesyntax_highlighter: highlight.jshighlight: line_number: true auto_detect: false tab_replace: &#x27;&#x27; wrap: true hljs: falseprismjs: preprocess: true line_number: true tab_replace: &#x27;&#x27;# Home page setting# path: Root path for your blogs index page. (default = &#x27;&#x27;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &#x27;&#x27; per_page: 10 order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Metadata elements## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/metameta_generator: true# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;updated_option: &#x27;mtime&#x27;# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Include / Exclude file(s)## include:/exclude: options only apply to the &#x27;source/&#x27; folderinclude:exclude:ignore:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: volantis# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repository: https://github.com/yourrepo.github.io.git branch: main# offline config passed to sw-precache.service_worker: maximumFileSizeToCacheInBytes: 5242880 staticFileGlobs: - public/**/*.&#123;js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125; stripPrefix: public verbose: true# # ...existing code...# #自定义生成静态文件脚本# scripts:# - scripts/generate-extra-file.js# # ...existing code... 我的npm结构如下（点击展开） 终端运行npm list，得到包结构图，有缺失的请自行下载。npm list123456789101112131415161718hexo-site@0.0.0 D:\\wenjian\\stepsave\\blog\\myblog├── @jiangtj/hexo-extend-theme@0.2.4├── hexo-deployer-git@4.0.0├── hexo-generator-archive@2.0.0├── hexo-generator-category@2.0.0├── hexo-generator-index@4.0.0├── hexo-generator-json-content@4.2.3├── hexo-generator-tag@2.0.0├── hexo-helper-qrcode@1.0.2├── hexo-offline-popup@1.0.3├── hexo-renderer-ejs@2.0.0├── hexo-renderer-marked@7.0.0├── hexo-renderer-stylus@3.0.1├── hexo-server@3.0.0├── hexo-theme-landscape@1.1.0├── hexo-theme-volantis@5.8.0├── hexo-wordcount@6.0.1└── hexo@7.3.0 2.6 关于魔改 强烈推荐DearXuan老师的魔改教程，讲的很仔细全面。 Volantis魔改教程https://blog.dearxuan.com/2023/01/07/Volantis魔改教程/ 我的魔改 blog\\source\\_volantis\\headBegin.ejs123&lt;script src=&quot;https://unpkg.com/jquery@3.6.0/dist/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script defer src=&quot;/custom.js&quot;&gt;&lt;/script&gt;&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://example.com/custom.css&quot;&gt; --&gt;blog\\source\\_volantis\\style.styl12345678910111213141516171819202122232425262728293031323334353637383940// 添加透明度#l_main .post,#l_side .widget opacity: 0.8// 文章不透明,否则会影响阅读#post.post,#docs.post opacity: 1//背景亮度.parallax-mirror filter: brightness(0.5)/* 此处调节字体大小.top .title font&#123; font-size: 7em;&#125;*/.cover-wrapper .cover-body .title &#123; font-size: 7em;&#125;.top .title span&#123; transition: 0.5s;&#125;.top .title:hover span:nth-child(1)&#123; margin-right: 10px;&#125;.top .title:hover span:nth-child(2)&#123; margin-left: 10px;&#125;.top .title:hover span&#123; color: #fff; text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 40px #fff, 0 0 80px #fff, 0 0 120px #fff, 0 0 160px #fff;&#125;blog\\custom.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061var binft = function (r) &#123; var isTransparent = true; function getRandomColor() &#123; if(isTransparent)&#123; isTransparent = false; //此处修改字体颜色,最后的 0 和 1 不要改 return &quot;rgba(255,255,255,0)&quot; &#125;else&#123; isTransparent = true; return &quot;rgba(255,255,255,1)&quot; &#125; &#125; function n(r) &#123; for (var n = document.createDocumentFragment(), i = 0; r &gt; i; i++) &#123; var oneword = document.createElement(&quot;span&quot;); oneword.textContent = &quot;_&quot;; // 此处是末尾字符,如果想用光标样式可以改为&quot;|&quot; oneword.style.color = getRandomColor(); n.appendChild(oneword); &#125; return n &#125; function i() &#123; var t = wordList[c.skillI]; c.step ? c.step-- : (c.step = refreshDelayTime, c.prefixP &lt; l.length ? (c.prefixP &gt;= 0 &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : &quot;forward&quot; === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = &quot;backward&quot;, c.delay = showTotalWordDelayTime) : c.skillP &gt; 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % wordList.length, c.direction = &quot;forward&quot;)), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? Math.min(maxLength, maxLength + c.prefixP) : Math.min(maxLength, t.length - c.skillP))), setTimeout(i, d) &#125; var l = &quot;&quot;, //此处改成你自己的诗词 wordList = [ //例： &quot;最是人间留不住，朱颜辞镜花辞树. ——王国维《蝶恋花》&quot;, &quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot; ].map(function (r) &#123; return r + &quot;&quot; &#125;), showTotalWordDelayTime = 2, refreshDelayTime = 1, maxLength = 1, d = 75, c = &#123; text: &quot;&quot;, prefixP: -maxLength, skillI: 0, skillP: 0, direction: &quot;forward&quot;, delay: showTotalWordDelayTime, step: refreshDelayTime &#125;; i()&#125;;binft(document.getElementById(&#x27;binft&#x27;));// 添加打开背景图片的函数function openCurrentBgImage() &#123; const bgElement = document.querySelector(&#x27;.parallax-mirror img&#x27;); if (bgElement &amp;&amp; bgElement.src) &#123; window.open(bgElement.src, &#x27;_blank&#x27;); &#125; else &#123; console.log(&#x27;未找到背景图片&#x27;); &#125;&#125; 3 CDN配置CDN的配置能让国内访问网站更加稳定快速，具体关于CDN请点击这里。 3.1 注册域名 我用的是腾讯云，如果使用其他的运营商也类似。 首先注册一个自己的域名，推荐.cn作为后缀，价格不贵。或者选择六位数字.xyz,貌似是目前最便宜的域名。 .cn后缀六位数字.xyz 按照指引完成域名注册，第一次注册要实名认证 3.2 域名解析到github 进入 腾讯云 &gt; 控制台 &gt; 我的域名 &gt; 解析 添加解析，将子域名解析到你的github pages上 操作示例 主机记录可以简单理解为子域名，比如你注册的域名是example.com,添加了主机记录为zzz后，可以用zzz.example.com访问你的网站。记录值就是你的域名指向的ip或其他域名，当记录值为其他域名，如yourname.github.io时，请使用CNAME记录类型。 进入 github &gt; 你的仓库 &gt; Setting &gt; Pages &gt; Custom domain 改成自己的子域名 Repository界面Setting界面 出现 DNS check successful 时说明更改成功，其本质就是在仓库根目录创建一个CNAME文件。 这时使用子域名就可以访问我们的网站了。 注意每次执行 hexo d 都会覆盖CNAME文件导致更改失效！ 3.3 CDN的配置这里我选择初七云作为运营商。便宜，而且部分服务器在国外，不用备案。 初七云CDN购买传送门https://volantis.js.org/contributors/ 推荐购买不用备案的亚太加速。 购买页面 购买成功后，进入控制台 &gt; 产品与服务 &gt; SCDN安全内容分发 &gt; 操作 &gt; 登录面板 ，进入初星盾。 控制台登录面板 要是显示待开通，请联系客服帮你开通。 进入初星盾后，点击CDN加速 &gt; 我的网站 &gt; 添加网站，按下图操作。加速域名可以选择blog.你的域名,即新的子域名;源站地址填写zzz.你的域名,即3.2中创建的子域名;回源主机名选择跟随源站。 点击保存后，你会得到一串CDN提供的CNAME值，你可以理解为CDN的域名。随后打开腾讯云控制台，进入域名解析页，添加主机记录为blog的解析，记录类型CNAME,值为CDN提供的那串域名。随后返回初星盾，直到网站状态显示成功。（这里我差不多等了15分钟） 腾讯云初星盾 最后进入初星盾，点击网站列表右侧的管理，进入HTTPS界面，选择免费申请证书。 证书申请入口 根据提升完成证书申请，最后你的网站就可以在blog.你的域名上打开啦！ 放一张ITDOG上的测试图： 至此所有基础配置完成 4 杂项配置4.1 解决hexo clean导致配置丢失hexo框架需要每次数据更新时执行hexo g重新覆盖blog\\public文件夹。多次的执行会让生成的静态网页发生不知名的错误，这时候就要用hexo clean命令先删除public文件夹，再执行hexo g重新部署。 hexo clean命令会彻底删除文件夹中的一切信息，而hexo d会把整个public文件夹中的东西覆盖推送到github。这时候，魔改配置文件custom.js和部署CDN的CNAME文件都会被覆盖导致丢失。 解决方案：把这两个文件都放在blog/source文件夹下 source文件夹下的文件会被hexo g自动生成到public文件夹下。 4.2 更好的CDN配置(初七云限定)对境内和境外流量分开解析，取消工具域名zzz.xinghenluyus.cn,境外流量直达github page，境内流量导入加速CDN，CDN回源直接填写blog.xinghenluyus.cn即可。因为初七云CDN服务器在海外，但是国内流量使用代理不能正常访问，会极大不方便。 分线路解析 更多问题欢迎在评论区探讨！","categories":[{"name":"编程之外","slug":"编程之外","permalink":"https://blog.xinghenluyus.cn/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%96/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://blog.xinghenluyus.cn/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"模型部署","slug":"模型部署","permalink":"https://blog.xinghenluyus.cn/categories/%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2/"},{"name":"编程之外","slug":"编程之外","permalink":"https://blog.xinghenluyus.cn/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%A4%96/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.xinghenluyus.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"Java后端","slug":"Java后端","permalink":"https://blog.xinghenluyus.cn/categories/Java%E5%90%8E%E7%AB%AF/"},{"name":"运维","slug":"运维","permalink":"https://blog.xinghenluyus.cn/categories/%E8%BF%90%E7%BB%B4/"},{"name":"软件下载","slug":"软件下载","permalink":"https://blog.xinghenluyus.cn/categories/%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://blog.xinghenluyus.cn/tags/%E6%95%99%E7%A8%8B/"},{"name":"异地组网","slug":"异地组网","permalink":"https://blog.xinghenluyus.cn/tags/%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/"},{"name":"踩坑日记","slug":"踩坑日记","permalink":"https://blog.xinghenluyus.cn/tags/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"},{"name":"磁盘管理","slug":"磁盘管理","permalink":"https://blog.xinghenluyus.cn/tags/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"},{"name":"光猫","slug":"光猫","permalink":"https://blog.xinghenluyus.cn/tags/%E5%85%89%E7%8C%AB/"}]}